# workflow/Snakefile

from snakemake.utils import min_version

##### set minimum snakemake version #####
min_version("8.27.1")


##### setup report #####
configfile: "config/config.yaml"


##### rules #####


include: "rules/common.smk"
include: "rules/datasets_download_genome.smk"
include: "rules/sra_tools.smk"
include: "rules/salmon_decoys.smk"
include: "rules/salmon_index.smk"
include: "rules/salmon_quant.smk"
include: "rules/star_index.smk"
include: "rules/star.smk"
include: "rules/fastqc.smk"
include: "rules/qualimap.smk"
include: "rules/multiqc.smk"


##### target rules #####


rule snapshot_config:
    input:
        multiext(
            "config/",
            "config.yaml",
            "multiqc_config.yaml",
            "README.md",
            "samples.tsv",
            "units.tsv",
        ),
    output:
        "results/last_run_config_snapshot/snapshot_done.txt",
    run:
        cp_config_to_res_dir()
        # Write a marker file to signal completion of the snapshot
        with open(output[0], "w") as f:
            f.write("Configuration snapshot completed.")


rule all:
    input:
        get_final_output(),
        "results/last_run_config_snapshot/snapshot_done.txt",
    message:
        """
        Workflow completed successfully! All final reports and intermediate
        files have been generated.
        """


rule test_fq_functions:
    message:
        "Testing get_fq_files and get_paired_reads with dummy wildcard values."
    run:
        # Define a simple dummy wildcard container.
        class Dummy:
            pass


        dummy = Dummy()
        # Set dummy values that match your samples/units
        # (make sure that these values exist in your samples.tsv and units.tsv)
        dummy.sample = "sample1"  # use a sample present in your metadata
        dummy.unit = "unit1"  # use a unit that exists for sample1
        dummy.read = "R1"

        # Now call the functions
        fq_file = get_fq_files(dummy)
        paired_files = get_paired_reads(dummy)

        # Print out the results (or write them to a file for inspection)
        print("get_fq_files returned:")
        print(fq_file)
        print("\nget_paired_reads returned:")
        print(paired_files)
