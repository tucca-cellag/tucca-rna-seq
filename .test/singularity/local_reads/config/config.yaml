# .test/singularity/local_reads/config/config.yaml

# Path to your sample sheet
# TSV format
# columns: sample_name, first_condition, ..., last_condition, replicate_num,
#          first_batch_effect, ..., last_batch_effect
samples: .test/singularity/local_reads/config/samples.tsv

# Path to your sequencing unit sheet
# TSV format
# columns: sample_name, unit_name, fq1, fq2, convention
#
# Units are technical replicates (e.g. lanes, or resequencing of the same
# biological sample).
units: .test/singularity/local_reads/config/units.tsv

ref:
  # NCBI genome accession
  # TODO: test GenBank and RefSeq
  ncbi_genome_accession: GCF_000146045.2

api_keys:
  ncbi:

diffexp:
  # num_exp_conditions
  # ------------------
  # Integer value that lets the workflow know how many experimental conditions
  # are in the workflow. In the provided examples in samples.tsv and units.tsv
  # there are four experimental conditions:
  # celltype, crispr_modified, suspension_adapted, and additional_treatment
  num_exp_conditions: 4
  # exp_conditions
  # ------------------
  # exp_conditions does not have a value itself, but it has subgroups that are
  # experimental variables for which you would like to determine whether or
  # not they have an effect on expression levels
  exp_conditions:
    celltype:
      # any fold change will be relative to this factor level
      base_level: C2C12
    crispr_modified:
      # any fold change will be relative to this factor level
      base_level: untreated
    suspension_adapted:
      # any fold change will be relative to this factor level
      base_level: adherent
  # batch_effects
  # -------------
  # variables whose effect you want to model to separate them from your
  # variables_of_interest
  batch_effects:
    - sequencing_batch
  # contrasts for the deseq2 results method to determine fold changes
  contrasts:
    treatment_1:
      # must be one of the variables_of_interest, for details see:
      # https://www.bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#contrasts
      variable_of_interest: treatment_1
      # must be a level present in the variable_of_interest that is not the
      # base_level specified above
      level_of_interest: ko
  # The default model includes all interactions among variables_of_interest
  # and batch_effects added on. For the example above this implicitly is:
  # model: ~sequencing_batch + treatment_1 * treatment_2
  # For the default model to be used, simply specify an empty `model: ""` below.
  # If you want to introduce different assumptions into your model, you can
  # specify a different model to use, for example skipping the interaction:
  # model: ~sequencing_batch + treatment_1 + treatment_2
  model:

params:
  fastqc:
    memory: ""
    extra: ""
  salmon_index:
    kmer_len: 31
    extra: ""
  star_index:
    sjdbOverhang: 149
    extra: ""
  star:
    # Note that this Snakemake pipeline is only built to make sure there are
    # BAM SortedByCoordinate formatted outputs currently
    outSAMtype: "BAM SortedByCoordinate"
    outSAMunmapped: Within
    outSAMattributes: Standard
    readFilesCommand: zcat
    outFilterMultimapNmax: 1
    outFilterScoreMinOverLread: 0
    outFilterMatchNminOverLread: 0
    alignIntronMin: 1
    alignIntronMax: 2500
    extra: ""
  qualimap_rnaseq:
    counting_alg: proportional
    sequencing_protocol: "non-strand-specific"
    extra: "--paired --java-mem-size=8G"
  salmon_quant:
    # -l A: Auto detect type of sequencing lib from which the reads came from
    lib_type: A
    # --validateMappings: Default mapping strategy for Salmon v1.0.0 and forward
    mapping_strategy: "--validateMappings"
    bias_correction: "--seqBias --posBias"
    extra: "--writeUnmappedNames"
  multiqc:
    report_name: "multiqc_report"
    # Leave out if you don't want to automatically overwrite existing reports
    overwrite_existing: "-f"
    extra: ""
  sra_tools:
    vdb_config_ra_path: "/repository/user/main/remote_access=true"
